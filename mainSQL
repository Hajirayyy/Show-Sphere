CREATE DATABASE MyShowSphere
GO
USE MyShowSphere
GO

---------------------------------------------------------------------------------------------
-- ////////////////////////      TABLE CREATION  (13)        ////////////////////////////////
---------------------------------------------------------------------------------------------

-- Table: Roles
CREATE TABLE Roles 
(
    roleID INT IDENTITY(1,1) PRIMARY KEY,
    roleName VARCHAR(20) UNIQUE NOT NULL
);
GO

---------------------------------------------------------------------------------------------
-- Table: Admins 
CREATE TABLE Admins 
(
    adminID INT IDENTITY(1,1) PRIMARY KEY,
    adminName VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE CHECK (email LIKE '%_@_%._%'),
	hashedPasscode VARBINARY(64) NOT NULL, 
    roleID INT DEFAULT 2 FOREIGN KEY REFERENCES Roles(roleID)  
);
GO

---------------------------------------------------------------------------------------------
-- Table: Users
CREATE TABLE Users
(
	userID INT IDENTITY(1,1) PRIMARY KEY,
	userName VARCHAR(50) NOT NULL,
	email VARCHAR(50) NOT NULL UNIQUE CHECK (email LIKE '%_@_%._%'),
	hashedPasscode VARBINARY(64) NOT NULL, 
	roleID INT DEFAULT 1 FOREIGN KEY REFERENCES Roles(roleID)  
);
GO

---------------------------------------------------------------------------------------------
-- Table: Movies 
CREATE TABLE Movies
(
    movieID INT IDENTITY(1,1) PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    genre VARCHAR(30) NOT NULL,
    releaseDate DATE CHECK(releaseDate <= GETDATE()),
    duration INT NOT NULL CHECK(duration > 0), 
	imageURL VARCHAR(255)
);
GO

---------------------------------------------------------------------------------------------
-- Table: Theatres 
CREATE TABLE Theatres
(
	theatreID INT IDENTITY(1,1) PRIMARY KEY,
	theatreName VARCHAR(50) UNIQUE NOT NULL,
	theatreLocation VARCHAR(50),
	totalSeats INT CHECK (totalSeats > 0) 
);
GO

-------------------------------------------------------------------------------------
-- Table: Screens (A theatre can have multiple screens)
CREATE TABLE Screens 
(
    screenID INT IDENTITY(1,1) PRIMARY KEY,
    theatreID INT NOT NULL FOREIGN KEY REFERENCES Theatres(theatreID) ON DELETE CASCADE,
    screenName VARCHAR(50) NOT NULL, 
    totalSeats INT NOT NULL CHECK (totalSeats > 0) DEFAULT 100
);
GO

-------------------------------------------------------------------------------------
-- Table: SeatLayout (Define all seats in a screen)
CREATE TABLE SeatLayout 
(
    seatID INT IDENTITY(1,1) PRIMARY KEY,
    screenID INT NOT NULL FOREIGN KEY REFERENCES Screens(screenID) ON DELETE CASCADE,
    seatRow CHAR(1) NOT NULL,  
    seatNumber INT NOT NULL,   
    UNIQUE (screenID, seatRow, seatNumber) 
);
GO

---------------------------------------------------------------------------------------------
-- Table: Showtimes (Tracks movie screenings with accurate seat availability)
CREATE TABLE Showtimes
(
    showtimeID INT IDENTITY(1,1) PRIMARY KEY,
    movieID INT NOT NULL,
    screenID INT NOT NULL,
    showDate DATE NOT NULL CHECK (showDate >= '2025-01-01'), 
    showStartTime TIME(0) NOT NULL,
    showEndTime TIME(0) NOT NULL,
    availableSeats INT DEFAULT 100,
    FOREIGN KEY (movieID) REFERENCES Movies(movieID) ON DELETE CASCADE,
    FOREIGN KEY (screenID) REFERENCES Screens(screenID) ON DELETE CASCADE
);
GO

---------------------------------------------------------------------------------------
-- Table: Tickets (Tracks ticket pricing per showtime)
--CREATE TABLE Tickets
--(
--    ticketID INT IDENTITY(1,1) PRIMARY KEY,
--    showtimeID INT NOT NULL FOREIGN KEY REFERENCES Showtimes(showtimeID) ON DELETE CASCADE,
--    price DECIMAL(10,2) NOT NULL CHECK (price > 0),
--    availableTickets INT NOT NULL DEFAULT 100  
--);
--GO

--drop table Tickets

CREATE TABLE Tickets (
    ticketID INT IDENTITY(1,1) PRIMARY KEY,
    showtimeID INT NOT NULL FOREIGN KEY REFERENCES Showtimes(showtimeID) ON DELETE CASCADE
);
GO

CREATE TABLE TicketDetails (
    showtimeID INT PRIMARY KEY FOREIGN KEY REFERENCES Showtimes(showtimeID) ON DELETE CASCADE,
    price DECIMAL(10,2) NOT NULL CHECK (price > 0),
    availableTickets INT NOT NULL DEFAULT 100
);
GO

---------------------------------------------------------------------------------------------
-- Table: Bookings (Track of booking statuses and total amount)
CREATE TABLE Bookings 
(
    bookingID INT IDENTITY(1,1) PRIMARY KEY,
    userID INT NOT NULL,               
    showtimeID INT NOT NULL,             
    seatsBooked INT CHECK (seatsBooked > 0), 
    totalPrice DECIMAL(10,2) DEFAULT NULL,
    bookingStatus VARCHAR(10) CHECK (bookingStatus IN ('Booked', 'Cancelled', 'Watched')),
    bookingTime DATETIME DEFAULT GETDATE(), 
    FOREIGN KEY (userID) REFERENCES Users(userID) ON DELETE CASCADE,  
    FOREIGN KEY (showtimeID) REFERENCES Showtimes(showtimeID) ON DELETE CASCADE 
);
GO

-----------------------------------------------------------------------------------
-- Table: SeatReservation (Info on seats booked by users)
CREATE TABLE SeatReservation
(
    reservationID INT IDENTITY(1,1) PRIMARY KEY,
    bookingID INT NOT NULL FOREIGN KEY REFERENCES Bookings(bookingID) ON DELETE CASCADE,
    seatID INT NOT NULL FOREIGN KEY REFERENCES SeatLayout(seatID) ON DELETE NO ACTION,
    reservationStatus BIT DEFAULT 1 CHECK (reservationStatus IN (0, 1)), 
    UNIQUE (bookingID, seatID)
);
GO

----------------------------------------------------------------------------------------
-- Table: Payments (Linked to totalPrice in Bookings)
CREATE TABLE Payments
(
    paymentID INT IDENTITY(1,1) PRIMARY KEY,
    bookingID INT NOT NULL FOREIGN KEY REFERENCES Bookings(bookingID) ON DELETE CASCADE, 
    amount DECIMAL(10,2) NOT NULL DEFAULT 0,  
    paymentDate DATETIME DEFAULT GETDATE(), 
    paymentMethod VARCHAR(20) NOT NULL CHECK (paymentMethod IN ('Credit Card', 'Debit Card', 'Cash', 'Online', 'Refund')),
    paymentStatus VARCHAR(10) NOT NULL CHECK (paymentStatus IN ('Paid', 'Pending', 'Failed'))
);
GO

---------------------------------------------------------------------------------------
-- Table: Reviews (User reviews for movies)
CREATE TABLE Reviews 
(
    reviewID INT IDENTITY(1,1) PRIMARY KEY,
    userID INT NOT NULL,
    movieID INT NOT NULL,
    rating DECIMAL(2,1) CHECK (rating BETWEEN 0.0 AND 5.0),
    reviewText VARCHAR(MAX),
    reviewDate DATE DEFAULT GETDATE(),
    CONSTRAINT unique_user_movie_review UNIQUE (userID, movieID),
    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (movieID) REFERENCES Movies(movieID)
);
GO

---------------------------------------------------------------------------------------------
-- ////////////////////////            TRIGGERS            //////////////////////////////////
---------------------------------------------------------------------------------------------

-- Increase availableSeats when a booking is cancelled + Refund
CREATE TRIGGER trg_UpdateAvailableSeats_Cancel
ON Bookings
AFTER UPDATE
AS
BEGIN
    IF UPDATE(bookingStatus) AND EXISTS (SELECT 1 FROM inserted WHERE bookingStatus = 'Cancelled')
    BEGIN
        -- Free reserved seats
        DELETE FROM SeatReservation
        WHERE bookingID IN (SELECT bookingID FROM inserted WHERE bookingStatus = 'Cancelled');

        -- Refund process
        INSERT INTO Payments (bookingID, amount, paymentDate, paymentMethod, paymentStatus)
        SELECT bookingID, totalPrice, GETDATE(), 'Refund', 'Paid'
        FROM inserted
        WHERE bookingStatus = 'Cancelled';

        -- Update available seats in Showtimes
        UPDATE s
        SET s.availableSeats = s.availableSeats + i.seatsBooked
        FROM Showtimes s
        JOIN inserted i ON s.showtimeID = i.showtimeID
        WHERE i.bookingStatus = 'Cancelled';
    END
END;
GO

-- Decrease availableSeats when a booking is made
CREATE TRIGGER trg_UpdateAvailableSeats_Book
ON Bookings
AFTER INSERT
AS
BEGIN
    UPDATE s
    SET s.availableSeats = s.availableSeats - ISNULL(i.seatsBooked, 0)
    FROM Showtimes s
    JOIN inserted i ON s.showtimeID = i.showtimeID;
END;
GO

-- Auto-Calculate totalPrice in Bookings
CREATE TRIGGER trg_CalculateTotalPrice
ON Bookings
AFTER INSERT, UPDATE
AS
BEGIN
    UPDATE b
    SET b.totalPrice = i.seatsBooked * td.price
    FROM Bookings b
    JOIN inserted i ON b.bookingID = i.bookingID
    JOIN TicketDetails td ON i.showtimeID = td.showtimeID
    WHERE b.totalPrice IS NULL;
END;
GO


-- Validate Payment
CREATE TRIGGER trg_InsertPayment
ON Bookings
AFTER UPDATE
AS
BEGIN
    -- Only insert a payment when totalPrice is updated and greater than 0
    IF UPDATE(totalPrice)
    BEGIN
        INSERT INTO Payments (bookingID, amount, paymentStatus, paymentMethod)
        SELECT i.bookingID, i.totalPrice, 'Pending', 'Online'
        FROM inserted i
        LEFT JOIN deleted d ON i.bookingID = d.bookingID
        WHERE (d.totalPrice IS NULL OR d.totalPrice <> i.totalPrice)  -- Ensure totalPrice actually changed
        AND i.totalPrice > 0
        AND NOT EXISTS (
            SELECT 1 FROM Payments p WHERE p.bookingID = i.bookingID AND p.paymentStatus = 'Pending'
        );
    END
END;
GO

Create TRIGGER trg_PreventShowtimeOverlap
ON Showtimes
INSTEAD OF INSERT, UPDATE
AS
BEGIN
    -- Check for overlapping showtimes on the same screen and date
    IF EXISTS (
        SELECT 1
        FROM Showtimes s
        JOIN inserted i ON s.screenID = i.screenID AND s.showDate = i.showDate
        WHERE 
            -- Exclude the same record in case of update
            s.showtimeID <> i.showtimeID
            -- Time overlap condition
            AND i.showStartTime < s.showEndTime
            AND i.showEndTime > s.showStartTime
    )
    BEGIN
        RAISERROR('ERROR: Showtimes overlap on the same screen and date!', 16, 1);
        ROLLBACK TRANSACTION;
    END
    ELSE
    BEGIN
        -- Safe to insert or update
        INSERT INTO Showtimes (movieID, screenID, showDate, showStartTime, showEndTime, availableSeats)
        SELECT movieID, screenID, showDate, showStartTime, showEndTime, availableSeats
        FROM inserted;
    END
END;
GO

-- Automatically Set availableTickets in TicketDetails
CREATE TRIGGER trg_UpdateAvailableTickets
ON SeatReservation
AFTER INSERT, DELETE
AS
BEGIN
    IF EXISTS (SELECT 1 FROM inserted) OR EXISTS (SELECT 1 FROM deleted)
    BEGIN
        UPDATE td
        SET availableTickets = (100 - ISNULL(reserved.SeatCount, 0))
        FROM TicketDetails td
        LEFT JOIN (
            SELECT b.showtimeID, COUNT(*) AS SeatCount
            FROM SeatReservation sr
            JOIN Bookings b ON sr.bookingID = b.bookingID
            GROUP BY b.showtimeID
        ) reserved ON td.showtimeID = reserved.showtimeID
        WHERE td.showtimeID IN (
            SELECT b.showtimeID
            FROM Bookings b
            WHERE b.bookingID IN (
                SELECT bookingID FROM inserted
                UNION
                SELECT bookingID FROM deleted
            )
        );
    END
END;
GO

---------------------------------------------------------------------------------------------
-- ////////////////////////      TABLE INSERTIONS            ////////////////////////////////
---------------------------------------------------------------------------------------------

-- Insert Roles
INSERT INTO Roles (roleName) VALUES ('User'), ('Admin');
GO

----------------------------------------------------------------------------------------------------------------
-- Insert Admins 
-- (2 admins)
INSERT INTO Admins (adminName, email, hashedPasscode) VALUES 
('Muhammad Kamran', 'admin1@movietickets.com', HASHBYTES('SHA2_256', 'securepass1')),
('Abdullah Naeem', 'admin2@movietickets.com', HASHBYTES('SHA2_256', 'securepass2'));
GO

----------------------------------------------------------------------------------------------------------------
-- Insert Users
-- (31 users)
INSERT INTO Users (userName, email, hashedPasscode) VALUES 
('Hajirah', 'hajirahrahmat16@gmail.com', HASHBYTES('SHA2_256', '180602xyz!')),
('Adeela Nasir', 'adeelanasir@gmail.com', HASHBYTES('SHA2_256', 'life@good')),
('Sundas Habib', 'sundashabib@gmail.com', HASHBYTES('SHA2_256', 'cakeboss')),
('Ali Khan', 'alikhanaa@gmail.com', HASHBYTES('SHA2_256', 'ali786')),
('Sara Ahmed', 'kdramafan@gmail.com', HASHBYTES('SHA2_256', 'anime4life')),
('Usman Tariq', 'usmantariq@gmail.com', HASHBYTES('SHA2_256', 'usman321')),
('Ayesha Zafar', 'ayeshazafar@gmail.com', HASHBYTES('SHA2_256', 'geniuswho')),
('Bilal Riaz', 'bilalriaz@gmail.com', HASHBYTES('SHA2_256', 'passcode')),
('Zara Javed', 'lostagain@gmail.com', HASHBYTES('SHA2_256', 'zara007')),
('Hamza Sheikh', 'bigbrainhamza@gmail.com', HASHBYTES('SHA2_256', 'kiyamatlab')),
('Farah Khan', 'farahkhan@gmail.com', HASHBYTES('SHA2_256', 'farah567')),
('Kamran Ali', 'kamranali@gmail.com', HASHBYTES('SHA2_256', 'film4life')),
('Hassan Raza', 'hassanraza@gmail.com', HASHBYTES('SHA2_256', 'razabro')),
('Maria Noor', 'marianoor@gmail.com', HASHBYTES('SHA2_256', 'ineedfood')),
('Tahir Mehmood', 'tahirmehmood@gmail.com', HASHBYTES('SHA2_256', 'mazhardope')),
('Iqra Salman', 'iqrasalman@gmail.com', HASHBYTES('SHA2_256', 'iqra543')),
('Noman Butt', 'nomanbutt@gmail.com', HASHBYTES('SHA2_256', 'nida@9')),
('Areeba Tariq', 'areebatariq@gmail.com', HASHBYTES('SHA2_256', 'ireadtoo')),
('Saad Jameel', 'saadjameel@gmail.com', HASHBYTES('SHA2_256', 'saad000')),
('Shahmeer Khan', 'shahmeerkhan@gmail.com', HASHBYTES('SHA2_256', '112277')),
('Mahnoor Rizwan', 'mahnoorrizwan@gmail.com', HASHBYTES('SHA2_256', 'mahnoor789')),
('Daniyal Qureshi', 'daniyalqureshi@gmail.com', HASHBYTES('SHA2_256', 'kuchbhii')),
('Adeel Hussain', 'oopsididitagain@gmail.com', HASHBYTES('SHA2_256', 'adeel654')),
('Fatima Zahra', 'fatimazahra@gmail.com', HASHBYTES('SHA2_256', 'fatima321')),
('Zubair Ahmed', 'zubairahmed@gmail.com', HASHBYTES('SHA2_256', 'zubair999')),
('Hina Malik', 'hinamalik@gmail.com', HASHBYTES('SHA2_256', 'moviedikha')),
('Raza Ali', 'razaali@gmail.com', HASHBYTES('SHA2_256', 'raza234')),
('Mehwish Javed', 'mehwishjaved@gmail.com', HASHBYTES('SHA2_256', 'mehwitchh')),
('Tariq Mehmood', 'icanfixitbro@gmail.com', HASHBYTES('SHA2_256', 'tariq888')),
('Sania Tariq', 'saniatariq@gmail.com', HASHBYTES('SHA2_256', 'kiyarkhon')),
('Hammad Saeed', 'hammadsaeed@gmail.com', HASHBYTES('SHA2_256', 'kiazrorrat'));
GO

----------------------------------------------------------------------------------------------------------------
-- Insert Movies
-- (40 movies)
INSERT INTO Movies (title, genre, releaseDate, duration) VALUES
('The Godfather', 'Crime', '1972-03-24', 175),
('Titanic', 'Romance', '1997-12-19', 194),
('Inception', 'Sci-Fi', '2010-07-16', 148),
('The Dark Knight', 'Action', '2008-07-18', 152),
('Forrest Gump', 'Drama', '1994-07-06', 142),
('Parasite', 'Thriller', '2019-05-30', 132),
('Interstellar', 'Sci-Fi', '2014-11-07', 169),
('The Shawshank Redemption', 'Drama', '1994-09-23', 142),
('Avengers: Endgame', 'Action', '2019-04-26', 181),
('Gladiator', 'Historical', '2000-05-05', 155),
('Joker', 'Thriller', '2019-10-04', 122),
('Pulp Fiction', 'Crime', '1994-10-14', 154),
('The Lord of the Rings: The Return of the King', 'Fantasy', '2003-12-17', 201),
('Fight Club', 'Drama', '1999-10-15', 139),
('The Matrix', 'Sci-Fi', '1999-03-31', 136),
('Saving Private Ryan', 'War', '1998-07-24', 169),
('The Silence of the Lambs', 'Thriller', '1991-02-14', 118),
('La La Land', 'Musical', '2016-12-09', 128),
('Coco', 'Animation', '2017-11-22', 105),
('Tenet', 'Sci-Fi', '2020-08-26', 150),
('Dune', 'Sci-Fi', '2021-10-22', 155),
('The Batman', 'Action', '2022-03-04', 176),
('Everything Everywhere All at Once', 'Sci-Fi', '2022-03-11', 139),
('Top Gun: Maverick', 'Action', '2022-05-27', 131),
('Spider-Man: No Way Home', 'Superhero', '2021-12-17', 148),
('Oppenheimer', 'Biography', '2023-07-21', 180),
('Barbie', 'Comedy', '2023-07-21', 114),
('John Wick: Chapter 4', 'Action', '2023-03-24', 169),
('Mission: Impossible � Dead Reckoning Part One', 'Action', '2023-07-12', 163),
('Killers of the Flower Moon', 'Crime', '2023-10-20', 206),
('Poor Things', 'Fantasy', '2023-09-08', 141),
('The Whale', 'Drama', '2022-12-09', 117),
('No Time to Die', 'Action', '2021-09-30', 163),
('Soul', 'Animation', '2020-12-25', 100),
('Turning Red', 'Animation', '2022-03-11', 100),
('The Super Mario Bros. Movie', 'Animation', '2023-04-05', 92),
('Godzilla vs. Kong', 'Action', '2021-03-31', 113),
('The Northman', 'Adventure', '2022-04-22', 137),
('Napoleon', 'Historical', '2023-11-22', 157),
('Wonka', 'Fantasy', '2023-12-15', 120);
GO

----------------------------------------------------------------------------------------------------------------
-- Insert Theaters
-- (8 theatres)
INSERT INTO Theatres (theatreName, theatreLocation, totalSeats) VALUES
('Universal Cinema', 'Emporium Mall, Lahore',200),
('Cue Cinema', 'Gullberg, Lahore', 400),
('Nueplex Cinema', 'DHA Phase8, Karachi', 300),
('The Arena Cinema', 'Bahria Town Tower, Karachi', 300),
('Islamabad Club Cinema', 'Main Murree Rd, Islamanbad', 200),
('Naz Cinema 3D', 'Sheikh Yaseen Gold Tower, Peshawar', 400),
('Cine Star Movie Theater', 'Dera Ada, Multan', 200),
('Cinestar', 'Mall of Sargodha', 300);
GO

----------------------------------------------------------------------------------------------------------------
-- Insert Screens 
-- (23 screens)
INSERT INTO Screens (theatreID, screenName) VALUES 

-- Universal Cinema (Emporium Mall, Lahore)
(1, 'Screen 1'), -- screenID = 1
(1, 'Screen 2'), -- screenID = 2

-- Cue Cinema (Gulberg, Lahore)
(2, 'Screen 1'), -- screenID = 3
(2, 'Screen 2'), -- screenID = 4
(2, 'Screen 3'), -- screenID = 5
(2, 'Screen 4'), -- screenID = 6

-- Nueplex Cinema (DHA Phase 8, Karachi)
(3, 'Screen 1'), -- screenID = 7
(3, 'Screen 2'), -- screenID = 8
(3, 'Screen 3'), -- screenID = 9

-- The Arena Cinema (Bahria Town Tower, Karachi)
(4, 'Screen 1'), -- screenID = 10
(4, 'Screen 2'), -- screenID = 11
(4, 'Screen 3'), -- screenID = 12

-- Islamabad Club Cinema (Main Murree Rd, Islamabad)
(5, 'Screen 1'), -- screenID = 13
(5, 'Screen 2'), -- screenID = 14

-- Naz Cinema 3D (Sheikh Yaseen Gold Tower, Peshawar) 
(6, 'Screen 1'), -- screenID = 15
(6, 'Screen 2'), -- screenID = 16
(6, 'Screen 3'), -- screenID = 17
(6, 'Screen 4'), -- screenID = 18

-- Cine Star Movie Theater (Dera Ada, Multan)
(7, 'Screen 1'), -- screenID = 19
(7, 'Screen 2'), -- screenID = 20

-- Cinestar (Mall of Sargodha)
(8, 'Screen 1'), -- screenID = 21
(8, 'Screen 2'), -- screenID = 22
(8, 'Screen 3'); -- screenID = 23
GO

----------------------------------------------------------------------------------------------------------------
-- Insert seatLayout (a shorter way which has A to T rows, each row has 5 seats using CTE)
--(2300 seats) includes all seats of every screen from every theatre

WITH Numbers AS ( -- temp number table
    SELECT TOP 26 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) - 1 AS num
    FROM sys.objects s1 CROSS JOIN sys.objects s2
),
SeatRows AS ( -- generate rows A-T
    SELECT CHAR(ASCII('A') + num) AS seatRow
    FROM Numbers
    WHERE num < 20
),
SeatNumbers AS ( -- generate seatNumbers 1-5
    SELECT TOP 5 ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS seatNumber
    FROM sys.objects s1 CROSS JOIN sys.objects s2
)
INSERT INTO SeatLayout (screenID, seatRow, seatNumber) -- insert seats for all screens
SELECT s.screenID, r.seatRow, n.seatNumber
FROM SeatRows r CROSS JOIN SeatNumbers n CROSS JOIN Screens s
WHERE s.screenID BETWEEN 1 AND 23;
GO

----------------------------------------------------------------------------------------------------------------
-- Insert seatReservation
-- This approach automatically assigns seats based on booking data
-- (317 reservations)
CREATE PROCEDURE AssignSeatsToAllBookings
AS
BEGIN
    SET NOCOUNT ON;

    -- Loop through all Bookings that need seat assignment
    DECLARE @bookingID INT, @showtimeID INT, @seatsBooked INT;

    DECLARE booking_cursor CURSOR FOR 
    SELECT bookingID, showtimeID, seatsBooked 
    FROM Bookings 
    WHERE bookingStatus = 'Booked';

    OPEN booking_cursor;
    FETCH NEXT FROM booking_cursor INTO @bookingID, @showtimeID, @seatsBooked;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Assign unique seats for each booking
        INSERT INTO SeatReservation (bookingID, seatID, reservationStatus)
        SELECT TOP (@seatsBooked) @bookingID, sl.seatID, 1
        FROM SeatLayout sl
        JOIN Screens sc ON sl.screenID = sc.screenID
        JOIN Showtimes s ON sc.screenID = s.screenID
        LEFT JOIN SeatReservation sr ON sl.seatID = sr.seatID 
            AND sr.reservationStatus = 1
        WHERE s.showtimeID = @showtimeID 
            AND sr.seatID IS NULL -- Only select unreserved seats
        ORDER BY sl.seatRow, sl.seatNumber;

        FETCH NEXT FROM booking_cursor INTO @bookingID, @showtimeID, @seatsBooked;
    END;

    CLOSE booking_cursor;
    DEALLOCATE booking_cursor;
END;
GO
-- run above procedure
EXEC AssignSeatsToAllBookings;
GO

----------------------------------------------------------------------------------------------------------------
-- Insert Reviews
--(The data is from before MARCH 2024)
INSERT INTO Reviews (userID, movieID, rating, reviewText, reviewDate) VALUES
-- October 2024 Reviews
(8, 8, 4.7, 'An unforgettable film with deep emotions.', '2024-10-05'),
(13, 1, 4.5, 'A classic crime drama that never gets old.', '2024-10-12'),
(26, 3, 4.0, 'Visually impressive, but the story felt a bit complex.', '2024-10-18'),
(4, 6, 4.8, 'A thought-provoking thriller with brilliant execution.', '2024-10-24'),
(29, 14, 3.9, 'Interesting concept, but execution could have been better.', '2024-10-29'),

-- November 2025 Reviews
(10, 8, 3.5, 'Good movie, but slightly overhyped.', '2025-11-02'),
(7, 1, 4.6, 'A masterpiece in storytelling and character depth.', '2025-11-09'),
(22, 3, 4.2, 'Engaging and visually stunning from start to finish.', '2025-11-15'),
(18, 6, 4.4, 'Well-crafted suspense and great acting.', '2025-11-22'),
(5, 14, 4.1, 'The philosophical themes really made me think.', '2025-11-28'),

-- December 2024 Reviews
(5, 12, 4.5, 'A powerful movie with exceptional storytelling.', '2024-12-03'),
(17, 27, 3.2, 'Started strong but lost its charm towards the end.', '2024-12-11'),
(9, 34, 4.8, 'A visually stunning masterpiece with great acting.', '2024-12-19'),
(21, 8, 3.7, 'An interesting plot, but some parts felt rushed.', '2024-12-24'),
(30, 19, 2.9, 'Disappointing. Expected much more from the hype.', '2024-12-29'),

-- January 2025 Reviews
(3, 7, 4.6, 'An emotional and gripping experience.', '2025-01-05'),
(14, 20, 2.5, 'Predictable storyline with average acting.', '2025-01-10'),
(28, 5, 4.9, 'One of the best performances I have ever seen!', '2025-01-18'),
(11, 31, 3.3, 'Some good moments, but the pacing was off.', '2025-01-23'),
(22, 14, 4.2, 'A unique movie with a deep and thought-provoking message.', '2025-01-30'),

-- February 2025 Reviews
(7, 9, 4.0, 'A solid watch with a satisfying ending.', '2025-02-02'),
(16, 25, 3.1, 'Decent, but nothing groundbreaking.', '2025-02-08'),
(24, 38, 5.0, 'Absolutely brilliant! Would watch again.', '2025-02-14'),
(2, 4, 4.3, 'Engaging from start to finish!', '2025-02-21'),
(19, 29, 3.8, 'Had potential, but lacked depth in characters.', '2025-02-26');
GO

----------------------------------------------------------------------------------------------------------------
-- Insert Showtimes
-- (30 showtimes)
INSERT INTO Showtimes (movieID, screenID, showDate, showStartTime, showEndTime) VALUES
-- April 2025 Showtimes
(1, 5, '2025-04-10', '11:00', '13:15'),
(2, 7, '2025-04-15', '12:30', '14:45'),
(3, 9, '2025-04-22', '14:00', '16:15'),
(4, 3, '2025-04-25', '16:00', '18:15'),
(5, 4, '2025-04-26', '18:30', '20:45'),
(6, 8, '2025-04-29', '20:00', '22:15'),
-- May 2025 Showtimes
(7, 12, '2025-05-01', '09:00', '11:15'),
(8, 2, '2025-05-03', '10:30', '12:45'),
(9, 6, '2025-05-05', '12:00', '14:15'),
(10, 11, '2025-05-07', '14:30', '16:45'),
(11, 13, '2025-05-09', '16:00', '18:15'),
(12, 10, '2025-05-11', '18:30', '20:45'),
(13, 14, '2025-05-13', '20:00', '22:15'),
(14, 15, '2025-05-16', '09:30', '11:45'),
(15, 17, '2025-05-18', '11:00', '13:15'),
(16, 18, '2025-05-20', '13:30', '15:45'),
(17, 19, '2025-05-22', '15:00', '17:15'),
(18, 20, '2025-05-24', '17:30', '19:45'),
(19, 21, '2025-05-27', '20:00', '22:15'),
-- June 2025 Showtimes
(20, 22, '2025-06-01', '09:00', '11:15'),
(21, 23, '2025-06-03', '10:30', '12:45'),
(22, 5, '2025-06-05', '12:00', '14:15'),
(23, 8, '2025-06-07', '14:30', '16:45'),
(24, 10, '2025-06-09', '16:00', '18:15'),
(25, 2, '2025-06-11', '18:30', '20:45'),
(26, 6, '2025-06-13', '20:00', '22:15'),
(27, 3, '2025-06-15', '09:30', '11:45'),
(28, 7, '2025-06-17', '11:00', '13:15'),
(29, 12, '2025-06-19', '13:30', '15:45'),
(30, 5, '2025-06-21', '15:00', '17:15'),
-- July 2025 Showtimes
(31, 4, '2025-04-12', '13:30', '15:45'),
(32, 9, '2025-04-18', '15:00', '17:15'),
(33, 11, '2025-04-20', '17:30', '19:45'),
(34, 12, '2025-04-23', '19:00', '21:15'),
(35, 3, '2025-04-28', '20:30', '22:45'),
(36, 5, '2025-05-02', '10:30', '12:45'),
(37, 8, '2025-05-04', '14:00', '16:15'),
(38, 7, '2025-05-06', '16:30', '18:45'),
(39, 2, '2025-05-08', '18:00', '20:15'),
(40, 6, '2025-05-10', '20:30', '22:45');
GO

----------------------------------------------------------------------------------------------------------------
---- Insert Tickets
---- (for 30 showtimes)
--INSERT INTO Tickets (showtimeID, price)
--VALUES
--(1, 500),  -- For Showtime 1
--(2, 1000), -- For Showtime 2
--(3, 300),  -- For Showtime 3
--(4, 500),  -- For Showtime 4
--(5, 1000), -- For Showtime 5
--(6, 300),  -- For Showtime 6
--(7, 500),  -- For Showtime 7
--(8, 1000), -- For Showtime 8
--(9, 300),  -- For Showtime 9
--(10, 500), -- For Showtime 10
--(11, 1000),-- For Showtime 11
--(12, 300), -- For Showtime 12
--(13, 500), -- For Showtime 13
--(14, 1000),-- For Showtime 14
--(15, 300), -- For Showtime 15
--(16, 500), -- For Showtime 16
--(17, 1000),-- For Showtime 17
--(18, 300), -- For Showtime 18
--(19, 500), -- For Showtime 19
--(20, 1000),-- For Showtime 20
--(21, 300), -- For Showtime 21
--(22, 500), -- For Showtime 22
--(23, 1000),-- For Showtime 23
--(24, 300), -- For Showtime 24
--(25, 500), -- For Showtime 25
--(26, 1000),-- For Showtime 26
--(27, 300), -- For Showtime 27
--(28, 500), -- For Showtime 28
--(29, 1000),-- For Showtime 29
--(30, 300); -- For Showtime 30
--GO

-- Insert into Tickets (for the relationship between ticketID and showtimeID)
INSERT INTO Tickets (showtimeID) VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12), (13),
(14), (15), (16), (17), (18), (19), (20), (21), (22), (23), (24), (25), (26), (27), (28), (29), (30);
GO

-- Insert TicketDetails for 30 showtimes (price and availableTickets for each showtime)
INSERT INTO TicketDetails (showtimeID, price)
VALUES
(1, 500),  -- For Showtime 1
(2, 1000), -- For Showtime 2
(3, 300),  -- For Showtime 3
(4, 500),  -- For Showtime 4
(5, 1000), -- For Showtime 5
(6, 300),  -- For Showtime 6
(7, 500),  -- For Showtime 7
(8, 1000), -- For Showtime 8
(9, 300),  -- For Showtime 9
(10, 500), -- For Showtime 10
(11, 1000),-- For Showtime 11
(12, 300), -- For Showtime 12
(13, 500), -- For Showtime 13
(14, 1000),-- For Showtime 14
(15, 300), -- For Showtime 15
(16, 500), -- For Showtime 16
(17, 1000),-- For Showtime 17
(18, 300), -- For Showtime 18
(19, 500), -- For Showtime 19
(20, 1000),-- For Showtime 20
(21, 300), -- For Showtime 21
(22, 500), -- For Showtime 22
(23, 1000),-- For Showtime 23
(24, 300), -- For Showtime 24
(25, 500), -- For Showtime 25
(26, 1000),-- For Showtime 26
(27, 300), -- For Showtime 27
(28, 500), -- For Showtime 28
(29, 1000),-- For Showtime 29
(30, 300); -- For Showtime 30
GO
----------------------------------------------------------------------------------------------------------------
-- Insert Bookings
-- (120 bookings)
drop trigger trg_PreventShowtimeOverlap

-- test
INSERT INTO Bookings (userID, showtimeID, seatsBooked, bookingStatus)
VALUES
-- For showtimeID = 1
(1, 1, 1, 'Booked'),(12, 1, 2, 'Booked'),(7, 1, 1, 'Cancelled'),(19, 1, 2, 'Booked'),

-- For showtimeID = 2
(25, 2, 3, 'Booked'),(14, 2, 1, 'Booked'),(6, 2, 1, 'Cancelled'),(17, 2, 3, 'Booked'),

-- For showtimeID = 3
(10, 3, 3, 'Booked'),(9, 3, 4, 'Cancelled'),(4, 3, 2, 'Booked'),(2, 3, 6, 'Booked'),

-- For showtimeID = 4
(30, 4, 3, 'Booked'),(21, 4, 4, 'Booked'),(8, 4, 5, 'Cancelled'),(26, 4, 6, 'Booked'),

-- For showtimeID = 5
(15, 5, 1, 'Booked'),(18, 5, 3, 'Booked'),(23, 5, 1, 'Cancelled'),(30, 5, 5, 'Booked'),

-- For showtimeID = 6
(5, 6, 2, 'Booked'),(11, 6, 4, 'Booked'),(20, 6, 1, 'Cancelled'),(27, 6, 2, 'Booked'),

-- For showtimeID = 7
(3, 7, 7, 'Booked'),(16, 7, 1, 'Booked'),(22, 7, 3, 'Cancelled'),(28, 7, 2, 'Booked'),

-- For showtimeID = 8
(24, 8, 3, 'Booked'),(29, 8, 2, 'Booked'),(13, 8, 5, 'Cancelled'),(1, 8, 1, 'Booked'),

-- For showtimeID = 9
(12, 9, 1, 'Booked'),(7, 9, 1, 'Booked'),(8, 9, 1, 'Cancelled'),(10, 9, 3, 'Booked'),

-- For showtimeID = 10
(17, 10, 5, 'Booked'),(2, 10, 2, 'Booked'),(25, 10, 1, 'Cancelled'),(16, 10, 1, 'Booked'),

-- For showtimeID = 11
(3, 11, 1, 'Booked'),(19, 11, 1, 'Booked'),(26, 11, 1, 'Cancelled'),(27, 11, 1, 'Booked'),

-- For showtimeID = 12
(28, 12, 1, 'Booked'),(5, 12, 2, 'Booked'),(9, 12, 5, 'Cancelled'),(1, 12, 4, 'Booked'),

-- For showtimeID = 13
(12, 13, 3, 'Booked'),(21, 13, 2, 'Booked'),(6, 13, 1, 'Cancelled'),(18, 13, 2, 'Booked'),

-- For showtimeID = 14
(4, 14, 2, 'Booked'),(16, 14, 4, 'Booked'),(8, 14, 1, 'Cancelled'),(10, 14, 1, 'Booked'),

-- For showtimeID = 15
(2, 15, 4, 'Booked'),(5, 15, 1, 'Booked'),(15, 15, 2, 'Cancelled'),(19, 15, 2, 'Booked'),

-- For showtimeID = 16
(17, 16, 2, 'Booked'),(7, 16, 1, 'Booked'),(8, 16, 4, 'Cancelled'),(25, 16, 2, 'Booked'),

-- For showtimeID = 17
(22, 17, 3, 'Booked'),(27, 17, 1, 'Booked'),(29, 17, 3, 'Cancelled'),(12, 17, 1, 'Booked'),

-- For showtimeID = 18
(11, 18, 3, 'Booked'),(5, 18, 1, 'Booked'),(30, 18, 5, 'Cancelled'),(6, 18, 2, 'Booked'),

-- For showtimeID = 19
(21, 19, 3, 'Booked'),(28, 19, 4, 'Booked'),(7, 19, 5, 'Cancelled'),(17, 19, 6, 'Booked'),

-- For showtimeID = 20
(8, 20, 3, 'Booked'), (14, 20, 2, 'Booked'),(25, 20, 5, 'Cancelled'),(16, 20, 1, 'Booked'),

-- For showtimeID = 21
(18, 21, 3, 'Booked'),(12, 21, 1, 'Booked'),(5, 21, 5, 'Cancelled'),(16, 21, 1, 'Booked'),

-- For showtimeID = 22
(20, 22, 1, 'Booked'),(22, 22, 2, 'Booked'),(28, 22, 5, 'Cancelled'),(18, 22, 2, 'Booked'),

-- For showtimeID = 23
(13, 23, 5, 'Booked'),(7, 23, 1, 'Booked'),(26, 23, 1, 'Cancelled'),(2, 23, 2, 'Booked'),

-- For showtimeID = 24
(9, 24, 3, 'Booked'),(30, 24, 5, 'Booked'),(14, 24, 2, 'Cancelled'),(19, 24, 6, 'Booked'),

-- For showtimeID = 25
(5, 25, 3, 'Booked'),(15, 25, 4, 'Booked'),(12, 25, 5, 'Cancelled'),(27, 25, 6, 'Booked'),

-- For showtimeID = 26
(3, 26, 3, 'Booked'),(17, 26, 4, 'Booked'),(20, 26, 5, 'Cancelled'),(25, 26, 6, 'Booked'),

-- For showtimeID = 27
(8, 27, 1, 'Booked'),(21, 27, 1, 'Booked'),(22, 27, 5, 'Cancelled'),(12, 27, 1, 'Booked'),

-- For showtimeID = 28
(24, 28, 3, 'Booked'),(19, 28, 4, 'Booked'),(5, 28, 1, 'Cancelled'),(18, 28, 6, 'Booked'),

-- For showtimeID = 29
(16, 29, 3, 'Booked'),(25, 29, 1, 'Booked'),(27, 29, 5, 'Cancelled'),(28, 29, 1, 'Booked'),

-- For showtimeID = 30
(9, 30, 1, 'Booked'),(18, 30, 4, 'Booked'),(22, 30, 1, 'Cancelled'),(19, 30, 6, 'Booked');


----------------------------------------------------------------------------------------------------------------
-- Insert Payments
-- There is no as such insertion. When a booking is made, its entry is automatically made in Payments table with 
-- "amount" set accordingly and "paymentStatus" set to "pending" which can be updated afterwards

-- Procedure to update the payment status to paid by an admin
CREATE PROCEDURE UpdatePaymentStatusByID
    @paymentID INT,
    @adminID INT
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM Admins WHERE adminID = @adminID)
    BEGIN
        PRINT 'Error: Admin does not exist!';
        RETURN;
    END
    UPDATE Payments
    SET paymentStatus = 'Paid'
    WHERE paymentID = @paymentID;

    PRINT 'Payment status updated!';
END;
GO

-- to update the statuses run the following
DECLARE @Updates TABLE (paymentID INT, adminID INT);
-- Insert 60+ rows with adminID as 1 or 2
INSERT INTO @Updates (paymentID, adminID)
VALUES 
    (121, 1), (122, 2), (123, 1), (124, 2), (125, 1), (126, 2), (127, 1), (128, 2), (129, 1), (210, 2),
    (211, 1), (212, 2), (213, 1), (214, 2), (215, 1), (16, 2), (17, 1), (18, 2), (219, 1), (220, 2),
    (221, 1), (22, 2), (223, 1), (24, 2), (25, 1), (26, 2), (27, 1), (28, 2), (29, 1), (30, 2),
    (31, 1), (32, 2), (33, 1), (34, 2), (135, 1), (36, 2), (137, 1), (38, 2), (39, 1), (40, 2),
    (41, 1), (42, 2), (43, 1), (44, 2), (45, 1), (46, 2), (47, 1), (48, 2), (49, 1), (50, 2),
    (51, 1), (152, 2), (53, 1), (54, 2), (55, 1), (56, 2), (157, 1), (58, 2), (159, 1), (60, 2);

-- Bulk update using JOIN
UPDATE P
SET P.paymentStatus = 'Paid'
FROM Payments P
JOIN @Updates U ON P.paymentID = U.paymentID
WHERE EXISTS (SELECT 1 FROM Admins A WHERE A.adminID = U.adminID);

ALTER TABLE Users
ADD resetToken NVARCHAR(255),
    resetTokenExpiry DATETIME;


-- Updates
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BNGEwYjgwOGQtYjg5ZS00Njc1LTk2ZGEtM2QwZWQ2NjdhZTE5XkEyXkFqcGc@._V1_.jpg'
WHERE title = 'The Godfather';
GO
UPDATE Movies
SET imageURL = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGiNzhDbFVfK2S1HUgG0Y7VHMMlBvpvBipJw&s'
WHERE title = 'Titanic';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BMjAxMzY3NjcxNF5BMl5BanBnXkFtZTcwNTI5OTM0Mw@@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Inception';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BMTMxNTMwODM0NF5BMl5BanBnXkFtZTcwODAyMTk2Mw@@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'The Dark Knight';
GO
UPDATE Movies
SET imageURL = 'https://rukminim2.flixcart.com/image/850/1000/kmns7m80/poster/f/z/g/medium-forrest-gump-is-1994-american-maxi-origins-jumbo-medium-original-imagfgb6uc5kdfry.jpeg?q=90&crop=false'
WHERE title = 'Forrest Gump';
GO
UPDATE Movies
SET imageURL = 'https://www.tjtoday.org/wp-content/uploads/2020/02/Screen-Shot-2020-02-16-at-8.15.14-PM-814x900.png'
WHERE title = 'Parasite';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BYzdjMDAxZGItMjI2My00ODA1LTlkNzItOWFjMDU5ZDJlYWY3XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Interstellar';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BYzdjMDAxZGItMjI2My00ODA1LTlkNzItOWFjMDU5ZDJlYWY3XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Interstellar';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BMDAyY2FhYjctNDc5OS00MDNlLThiMGUtY2UxYWVkNGY2ZjljXkEyXkFqcGc@._V1_.jpg'
WHERE title = 'The Shawshank Redemption';
GO
UPDATE Movies
SET imageURL = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS8KgQqieGMCHIjBDDNfcLR_axFnQWWF4uOgQ&s'
WHERE title = 'Avengers: Endgame';
GO
UPDATE Movies
SET imageURL = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS8KgQqieGMCHIjBDDNfcLR_axFnQWWF4uOgQ&s'
WHERE title = 'Avengers: Endgame';
GO
UPDATE Movies
SET imageURL = 'https://i.pinimg.com/736x/78/e9/81/78e98178743e590470688d27be2c9e6b.jpg'
WHERE title = 'Gladiator';
GO
UPDATE Movies
SET imageURL = 'https://cdna.artstation.com/p/assets/images/images/028/046/546/large/olga-tysko-joker1000-72.jpg?1593346703'
WHERE title = 'Joker';
GO
UPDATE Movies
SET imageURL = 'https://posterspy.com/wp-content/uploads/2024/11/DEFAULTPulpFiction30thAnniversary_Poster1c0e27d9-7e9f-415c-b6c4-454dfcb88ac5.jpg'
WHERE title = 'Pulp Fiction';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BMTZkMjBjNWMtZGI5OC00MGU0LTk4ZTItODg2NWM3NTVmNWQ4XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'The Lord of the Rings: The Return of the King';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BOTgyOGQ1NDItNGU3Ny00MjU3LTg2YWEtNmEyYjBiMjI1Y2M5XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Fight Club';
GO
UPDATE Movies
SET imageURL = 'https://alternativemovieposters.com/wp-content/uploads/2022/03/Aldo-Galvan_Matrix.jpg'
WHERE title = 'The Matrix';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BZGZhZGQ1ZWUtZTZjYS00MDJhLWFkYjctN2ZlYjE5NWYwZDM2XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Saving Private Ryan';
GO
UPDATE Movies
SET imageURL = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSMu_8n4zgG8-XCsDp7HdbuYVbOkLM6JudtWg&s'
WHERE title = 'The Silence of the Lambs';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/I/91jrKX9xjQL._AC_SL1500_.jpg'
WHERE title = 'La La Land';
GO
UPDATE Movies
SET imageURL = 'https://i.ebayimg.com/00/s/MTYwMFgxMDc5/z/QZcAAOSwh41apSKg/$_57.JPG?set_id=8800005007'
WHERE title = 'Coco';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BMTU0ZjZlYTUtYzIwMC00ZmQzLWEwZTAtZWFhMWIwYjMxY2I3XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Tenet';
GO
UPDATE Movies
SET imageURL = 'https://imageio.forbes.com/specials-images/imageserve/61116cea2313e8bae55a536a/-Dune-/0x0.jpg?format=jpg&width=960'
WHERE title = 'Dune';
GO
UPDATE Movies
SET imageURL = 'https://rukminim2.flixcart.com/image/850/1000/l0bbonk0/poster/l/b/4/medium-the-batman-2022-movie-poster-18-x-12-inch-300-gsm-m0057-original-imagc3z7xygjupqv.jpeg?q=90&crop=false'
WHERE title = 'The Batman';
GO
UPDATE Movies
SET imageURL = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTpokhJeOkhn_ntJwgmyah-QY-MTByHjcWaWQ&s'
WHERE title = 'Everything Everywhere All at Once';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BMDBkZDNjMWEtOTdmMi00NmExLTg5MmMtNTFlYTJlNWY5YTdmXkEyXkFqcGc@._V1_.jpg'
WHERE title = 'Top Gun: Maverick';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BMmFiZGZjMmEtMTA0Ni00MzA2LTljMTYtZGI2MGJmZWYzZTQ2XkEyXkFqcGc@._V1_.jpg'
WHERE title = 'Spider-Man: No Way Home';
GO
UPDATE Movies
SET imageURL = 'https://www.hollywoodreporter.com/wp-content/uploads/2022/07/Oppenheimer-Movie-Poster-Universal-Publicity-EMBED-2022-.jpg?w=1000'
WHERE title = 'Oppenheimer';
GO
UPDATE Movies
SET imageURL = 'https://image.tmdb.org/t/p/original/rt6WA4WVaiVdaArNafx4JqOuLA3.jpg'
WHERE title = 'Barbie';
GO
UPDATE Movies
SET imageURL = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ_pmVKn6nDaWWhX5pFEK4LDJ7iya9s4nEQKA&s'
WHERE title = 'John Wick: Chapter 4';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BN2U4OTdmM2QtZTkxYy00ZmQyLTg2N2UtMDdmMGJmNDhlZDU1XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Mission: Impossible ? Dead Reckoning Part One';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BZWY5ZDVjNTUtODI5Yy00MjFhLWEyM2EtYzZjM2VjZTI0MTBjXkEyXkFqcGc@._V1_.jpg'
WHERE title = 'Killers of the Flower Moon';
GO
UPDATE Movies
SET imageURL = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9SGfWViKZFRHsa8Uxydw6ERCGC0Yc7eZw0w&s'
WHERE title = 'Poor Things';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BYmNhOWMyNTYtNTljNC00NTU3LWFiYmQtMDBhOGU5NWFhNGU5XkEyXkFqcGc@._V1_.jpg'
WHERE title = 'The Whale';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BZGZiOGZhZDQtZmRkNy00ZmUzLTliMGEtZGU0NjExOGMxZDVkXkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'No Time to Die';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BZTZkYjA5MDEtMjY1ZC00ODk5LThjOTUtZDYxODEzYWNjMTU2XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Soul';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BODY2NjExYmUtZTQ4NS00NzM2LWE2NWYtZWY2NGIyOTBmNzI3XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Turning Red';
GO
UPDATE Movies
SET imageURL = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR3cOepKdRsdhyh8qrejl2DdIMejYLbziXsyw&s'
WHERE title = 'The Super Mario Bros. Movie';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BZGE3N2QzZGYtODBjMS00YmNiLTg3Y2EtMTJlMGZlOTJlMTg1XkEyXkFqcGc@._V1_.jpg'
WHERE title = 'Godzilla vs. Kong';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BYzgwM2JiY2MtNWQ5OC00NDc1LWExMjYtYmY2YjViZmViYWM5XkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'The Northman';
GO
UPDATE Movies
SET imageURL = 'https://image.tmdb.org/t/p/original/s46YI7diwlqDVLe55uOaO1VzTId.jpg'
WHERE title = 'Napoleon';
GO
UPDATE Movies
SET imageURL = 'https://m.media-amazon.com/images/M/MV5BM2Y1N2ZhNjctYjVhZC00MDg2LWFhNTItMzI3ZjAwZDhjYmFiXkEyXkFqcGc@._V1_FMjpg_UX1000_.jpg'
WHERE title = 'Wonka';
GO
ALTER TABLE Movies
ADD description NVARCHAR(MAX); 

UPDATE Movies SET description = 'An aging mafia boss transfers control of his empire to his reluctant son.' WHERE title = 'The Godfather';
GO
UPDATE Movies SET description = 'A rich girl and a poor artist fall in love aboard the doomed RMS Titanic.' WHERE title = 'Titanic';
GO
UPDATE Movies SET description = 'A skilled thief enters people’s dreams to plant an idea and reclaim his life.' WHERE title = 'Inception';
GO
UPDATE Movies SET description = 'Batman battles the chaos unleashed by the Joker in Gotham City.' WHERE title = 'The Dark Knight';
GO
UPDATE Movies SET description = 'A simple man unwittingly influences historic events throughout his extraordinary life.' WHERE title = 'Forrest Gump';
GO
UPDATE Movies SET description = 'A poor family schemes to infiltrate a wealthy household with unexpected consequences.' WHERE title = 'Parasite';
GO
UPDATE Movies SET description = 'Astronauts travel through a wormhole in space in a desperate search for a new home for humanity.' WHERE title = 'Interstellar';
GO
UPDATE Movies SET description = 'Two imprisoned men bond over the years, finding hope and eventual freedom.' WHERE title = 'The Shawshank Redemption';
GO
UPDATE Movies SET description = 'The Avengers reassemble to reverse Thanos’ destruction and restore balance to the universe.' WHERE title = 'Avengers: Endgame';
GO
UPDATE Movies SET description = 'A betrayed general fights as a gladiator to avenge his family and overthrow a corrupt emperor.' WHERE title = 'Gladiator';
GO
UPDATE Movies SET description = 'A failed comedian''s descent into madness creates a cultural movement in Gotham.' WHERE title = 'Joker';
GO
UPDATE Movies SET description = 'Interwoven crime tales unfold through quirky characters and sharp dialogue in Los Angeles.' WHERE title = 'Pulp Fiction';
GO
UPDATE Movies SET description = 'The final battle for Middle-earth begins as Frodo nears Mount Doom.' WHERE title = 'The Lord of the Rings: The Return of the King';
GO
UPDATE Movies SET description = 'An office worker forms a secret fight club that spirals out of control.' WHERE title = 'Fight Club';
GO
UPDATE Movies SET description = 'A hacker discovers reality is a simulation and joins a rebellion against its controllers.' WHERE title = 'The Matrix';
GO
UPDATE Movies SET description = 'A squad of U.S. soldiers embarks on a mission to save a paratrooper during WWII.' WHERE title = 'Saving Private Ryan';
GO
UPDATE Movies SET description = 'An FBI trainee seeks help from a cannibalistic killer to catch another serial murderer.' WHERE title = 'The Silence of the Lambs';
GO
UPDATE Movies SET description = 'Two aspiring artists fall in love while chasing their dreams in Los Angeles.' WHERE title = 'La La Land';
GO
UPDATE Movies SET description = 'A young boy journeys to the Land of the Dead to discover his family''s musical heritage.' WHERE title = 'Coco';
GO
UPDATE Movies SET description = 'A secret agent manipulates time in a mission to prevent global annihilation.' WHERE title = 'Tenet';
GO
UPDATE Movies SET description = 'A noble family becomes embroiled in a battle for control of the galaxy''s most valuable asset.' WHERE title = 'Dune';
GO
UPDATE Movies SET description = 'A young Batman investigates a string of murders in a decaying Gotham.' WHERE title = 'The Batman';
GO
UPDATE Movies SET description = 'A woman connects with parallel versions of herself to save the multiverse.' WHERE title = 'Everything Everywhere All at Once';
GO
UPDATE Movies SET description = 'After decades, Maverick returns to train a new generation of elite pilots.' WHERE title = 'Top Gun: Maverick';
GO
UPDATE Movies SET description = 'Peter Parker enlists help to fix reality after his identity is revealed.' WHERE title = 'Spider-Man: No Way Home';
GO
UPDATE Movies SET description = 'The story of J. Robert Oppenheimer and his role in developing the atomic bomb.' WHERE title = 'Oppenheimer';
GO
UPDATE Movies SET description = 'Barbie ventures into the real world to discover her true purpose and identity.' WHERE title = 'Barbie';
GO
UPDATE Movies SET description = 'John Wick faces deadly enemies across the globe as he seeks his freedom.' WHERE title = 'John Wick: Chapter 4';
GO
UPDATE Movies SET description = 'Ethan Hunt races against time to stop a new global threat.' WHERE title = 'Mission: Impossible ? Dead Reckoning Part One';
GO
UPDATE Movies SET description = 'A chilling tale of murder and conspiracy in 1920s Oklahoma.' WHERE title = 'Killers of the Flower Moon';
GO
UPDATE Movies SET description = 'A woman reanimated with a childlike mind embarks on a wild journey of discovery.' WHERE title = 'Poor Things';
GO
UPDATE Movies SET description = 'A reclusive English teacher attempts to reconnect with his estranged daughter.' WHERE title = 'The Whale';
GO
UPDATE Movies SET description = 'James Bond comes out of retirement for one final mission against a new villain.' WHERE title = 'No Time to Die';
GO
UPDATE Movies SET description = 'A jazz musician gets a second chance at life after a soul-searching journey.' WHERE title = 'Soul';
GO
UPDATE Movies SET description = 'A teenage girl discovers she turns into a giant red panda when overwhelmed.' WHERE title = 'Turning Red';
GO
UPDATE Movies SET description = 'Mario and Luigi embark on a quest through the Mushroom Kingdom.' WHERE title = 'The Super Mario Bros. Movie';
GO
UPDATE Movies SET description = 'Two legendary titans clash while humans uncover a hidden world beneath them.' WHERE title = 'Godzilla vs. Kong';
GO
UPDATE Movies SET description = 'A Viking prince sets out on a bloody quest to avenge his father''s death.' WHERE title = 'The Northman';
GO
UPDATE Movies SET description = 'The rise and fall of Napoleon Bonaparte, from military commander to emperor.' WHERE title = 'Napoleon';
GO
UPDATE Movies SET description = 'The origin story of Willy Wonka and his fantastical chocolate empire.' WHERE title = 'Wonka';
GO


ALTER TABLE Payments
DROP CONSTRAINT CK_Payments_paymentStatus;
GO

ALTER TABLE Payments
ADD CONSTRAINT CK_Payments_paymentStatus
CHECK (paymentStatus IN ('Paid', 'Pending', 'Failed', 'Refunded'));
GO


